generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  SUPER_ADMIN
}

enum AdminActionType {
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  RESET_DEVICE
  PROMOTE_TO_ADMIN
  DEMOTE_FROM_ADMIN
  MODIFY_ATTENDANCE
  SYSTEM_CONFIG
  OTHER
}

enum LoginStatus {
  SUCCESS
  FAILED_WRONG_DEVICE
  FAILED_WRONG_LOCATION
  FAILED_WRONG_CREDENTIALS
  FAILED_OTHER
}

enum AttendanceStatus {
  COMPLETE
  INCOMPLETE
  ABSENT
  EXCUSED
  INVALID
  PRESENT
  ENTRY_MARKED
  EXIT_MARKED
}

enum QRCodeType {
  ENTRY
  EXIT
}

enum ResetPurpose {
  DEVICE_RESET
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
}

// ======================= MODELS =======================

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  phoneNumber String   @unique
  role        Role     @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  password    String
  isActive    Boolean  @default(true)

  student            Student?
  admin              Admin?
  superAdmin         SuperAdmin?
  deviceFingerprint  DeviceFingerprint?
  attendanceRecords  AttendanceRecord[]
  adminActions       AdminAction[]        @relation("AdminActions")
  loginAttempts      LoginAttempt[]
  deviceResets       DeviceResetHistory[] @relation("ResetBy")
  deviceResetsTarget DeviceResetHistory[] @relation("ResetFor")
  resetCodes         ResetCode[]
  accounts           Account[]
  sessions           Session[]
}

model Student {
  id                    String    @id @default(uuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentId             String?   @unique
  enrollmentYear        Int?
  currentSemester       Int?
  isGraduated           Boolean   @default(false)
  fatherName            String?
  motherName            String?
  fatherPhoneNumber     String?
  motherPhoneNumber     String?
  dateOfBirth           DateTime?
  address               String?
  course                String?
  department            String?
  yearOfStudy           Int?
  emergencyContactName  String?
  emergencyContactPhone String?
  agreedToTerms         Boolean   @default(false)
}

model Admin {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedBy String?
  assignedAt DateTime @default(now())
}

model SuperAdmin {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentHead String?
}

model AdminAction {
  id           String          @id @default(uuid())
  adminId      String
  admin        User            @relation("AdminActions", fields: [adminId], references: [id])
  actionType   AdminActionType
  targetUserId String?
  description  String
  metadata     Json?
  createdAt    DateTime        @default(now())
}

model DeviceFingerprint {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fingerprint     String
  deviceType      String
  deviceModel     String?
  browser         String?
  operatingSystem String?
  registeredAt    DateTime @default(now())
  lastUsed        DateTime @default(now())
  isActive        Boolean  @default(true)
}

model DeviceResetHistory {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation("ResetFor", fields: [userId], references: [id])
  resetByUserId  String
  resetBy        User     @relation("ResetBy", fields: [resetByUserId], references: [id])
  oldFingerprint String?
  newFingerprint String?
  reason         String?
  resetAt        DateTime @default(now())
}

model LoginAttempt {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  deviceFingerprint String
  ipAddress         String?
  userAgent         String?
  location          Json?
  status            LoginStatus
  timestamp         DateTime    @default(now())
}

model AttendanceRecord {
  id                String           @id @default(uuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  date              DateTime         @default(now())
  entryTime         DateTime?
  exitTime          DateTime?
  status            AttendanceStatus @default(INCOMPLETE)
  entryLocation     Json?
  exitLocation      Json?
  deviceFingerprint String?
  isManuallyAdded   Boolean          @default(false)
  addedBy           String?
  modifiedBy        String?
  modifiedAt        DateTime?
  notes             String?
  qrCodeId          String?

  @@unique([userId, date], name: "user_daily_attendance")
}

model QRCode {
  id         String     @id @default(uuid())
  code       String     @unique
  type       QRCodeType
  expiresAt  DateTime
  isActive   Boolean    @default(true)
  createdBy  String
  createdAt  DateTime   @default(now())
  lastUsed   DateTime?
  usageCount Int        @default(0)
}

model CampusLocation {
  id        String  @id @default(uuid())
  name      String
  latitude  Float
  longitude Float
  radius    Float
  startTime String
  endTime   String
  isActive  Boolean @default(true)
}

model AttendanceReport {
  id          String   @id @default(uuid())
  name        String
  dateRange   Json
  filters     Json?
  format      String
  generatedBy String
  generatedAt DateTime @default(now())
  url         String?
  summary     Json?
}

model ResetCode {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  code      String
  purpose   ResetPurpose
  expiresAt DateTime
  isUsed    Boolean      @default(false)
  createdAt DateTime     @default(now())
  usedAt    DateTime?
}

model SystemSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  lastUpdated DateTime @default(now())
  updatedBy   String?
}

model DashboardView {
  id            String   @id @default(uuid())
  name          String   @unique
  configuration Json
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
