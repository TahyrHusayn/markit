generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  name        String
  phoneNumber String   @unique
  role        Role     @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Student specific fields
  studentId             String?   @unique
  fatherName            String?
  motherName            String?
  fatherPhoneNumber     String?
  motherPhoneNumber     String?
  dateOfBirth           DateTime?
  address               String?
  course                String?
  department            String?
  yearOfStudy           Int?
  profilePicture        String? // URL to stored image
  emergencyContactName  String?
  emergencyContactPhone String?
  password              String? // Hashed password if needed
  hasConsented          Boolean?  @default(false)
  agreedToTerms         Boolean?  @default(false)

  // Admin specific status
  isActive  Boolean @default(true)
  createdBy String? @db.ObjectId // ID of admin who created this user

  // Relationships
  student            Student?
  admin              Admin?
  superAdmin         SuperAdmin?
  deviceFingerprint  DeviceFingerprint?
  attendanceRecords  AttendanceRecord[]
  adminActions       AdminAction[] // Actions performed by this admin
  loginAttempts      LoginAttempt[]
  deviceResets       DeviceResetHistory[] @relation("ResetBy")
  deviceResetsTarget DeviceResetHistory[] @relation("ResetFor")
  resetCodes         ResetCode[]

  @@map("users")
}

enum Role {
  STUDENT
  ADMIN
  SUPER_ADMIN
}

model Student {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentYear  Int?
  currentSemester Int?
  isGraduated     Boolean @default(false)

  @@map("students")
}

model Admin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedBy String?  @db.ObjectId // ID of SuperAdmin who assigned this role
  assignedAt DateTime @default(now())

  @@map("admins")
}

model SuperAdmin {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @unique @db.ObjectId
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentHead String? // Department they are head of

  @@map("super_admins")
}

model AdminAction {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  adminId      String          @db.ObjectId
  admin        User            @relation(fields: [adminId], references: [id])
  actionType   AdminActionType
  targetUserId String?         @db.ObjectId // If action was on a user
  description  String
  metadata     Json? // Additional info about the action
  createdAt    DateTime        @default(now())

  @@map("admin_actions")
}

enum AdminActionType {
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  RESET_DEVICE
  PROMOTE_TO_ADMIN
  DEMOTE_FROM_ADMIN
  MODIFY_ATTENDANCE
  SYSTEM_CONFIG
  OTHER
}

model DeviceFingerprint {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fingerprint     String // Unique device identifier
  deviceType      String // Should be "PHONE" for valid signup
  deviceModel     String? // Additional device info
  browser         String?
  operatingSystem String?
  registeredAt    DateTime @default(now())
  lastUsed        DateTime @default(now())
  isActive        Boolean  @default(true)

  @@map("device_fingerprints")
}

model DeviceResetHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation("ResetFor", fields: [userId], references: [id])
  resetByUserId  String   @db.ObjectId
  resetBy        User     @relation("ResetBy", fields: [resetByUserId], references: [id])
  oldFingerprint String?
  newFingerprint String?
  reason         String?
  resetAt        DateTime @default(now())

  @@map("device_reset_history")
}

model LoginAttempt {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  user              User        @relation(fields: [userId], references: [id])
  deviceFingerprint String
  ipAddress         String?
  userAgent         String?
  location          Json? // GPS coordinates
  status            LoginStatus
  timestamp         DateTime    @default(now())

  @@map("login_attempts")
}

enum LoginStatus {
  SUCCESS
  FAILED_WRONG_DEVICE
  FAILED_WRONG_LOCATION
  FAILED_WRONG_CREDENTIALS
  FAILED_OTHER
}

model AttendanceRecord {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  userId            String           @db.ObjectId
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  date              DateTime         @default(now())
  entryTime         DateTime?
  exitTime          DateTime?
  status            AttendanceStatus @default(INCOMPLETE)
  entryLocation     Json? // GPS coordinates for entry
  exitLocation      Json? // GPS coordinates for exit
  deviceFingerprint String? // Stored fingerprint at time of attendance
  isManuallyAdded   Boolean          @default(false)
  addedBy           String?          @db.ObjectId // If manually added by admin
  modifiedBy        String?          @db.ObjectId // If modified by admin
  modifiedAt        DateTime?
  notes             String?
  qrCodeId          String?          @db.ObjectId
  isPresent         Boolean          @default(false)
  entryMarked       Boolean          @default(false)
  exitMarked        Boolean          @default(false)

  @@unique([userId, date], name: "user_daily_attendance")
  @@map("attendance_records")
}

enum AttendanceStatus {
  COMPLETE // Both entry and exit scans done
  INCOMPLETE // Only entry scan done
  ABSENT // No scan done
  EXCUSED // Absence excused by admin
  INVALID // Wrong device or location
}

model QRCode {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  code       String     @unique
  type       QRCodeType
  expiresAt  DateTime
  isActive   Boolean    @default(true)
  createdBy  String     @db.ObjectId
  createdAt  DateTime   @default(now())
  lastUsed   DateTime?
  usageCount Int        @default(0)

  @@map("qr_codes")
}

enum QRCodeType {
  ENTRY
  EXIT
}

model CampusLocation {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  latitude  Float
  longitude Float
  radius    Float // Radius in meters for valid attendance marking
  startTime String // Format: "09:00" - When attendance marking starts
  endTime   String // Format: "17:00" - When attendance marking ends
  isActive  Boolean @default(true)

  @@map("campus_locations")
}

model AttendanceReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  dateRange   Json // { startDate, endDate }
  filters     Json? // Any filters applied (department, course, etc.)
  format      String // PDF, Excel, etc.
  generatedBy String   @db.ObjectId
  generatedAt DateTime @default(now())
  url         String? // Storage URL for the report
  summary     Json? // Attendance summary statistics

  @@map("attendance_reports")
}

model ResetCode {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  code      String
  purpose   ResetPurpose
  expiresAt DateTime
  isUsed    Boolean      @default(false)
  createdAt DateTime     @default(now())
  usedAt    DateTime?

  @@map("reset_codes")
}

enum ResetPurpose {
  DEVICE_RESET
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
}

model SystemSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  value       String
  description String?
  lastUpdated DateTime @default(now())
  updatedBy   String?  @db.ObjectId

  @@map("system_settings")
}

model DashboardView {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  configuration Json // Stores filters, columns, sorting preferences
  createdBy     String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("dashboard_views")
}
